from google import genai
from google.cloud import storage
import os
import uuid
import logging
import sys

# Add the app directory to Python path for imports
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))
from app.core.config import config

logger = logging.getLogger(__name__)


class GeminiImageService:
    def __init__(self):
        """Initialize the Gemini image generation service"""
        self.api_key = config.GEMINI_API_KEY
        if not self.api_key:
            raise ValueError("GEMINI_API_KEY is required in .env file")
        
        self.client = genai.Client(api_key=self.api_key)
        self.output_dir = config.IMAGES_DIR
        
        # Create output directory if it doesn't exist
        os.makedirs(self.output_dir, exist_ok=True)

    def generate_image(self, prompt: str, style: str, shape: str) -> tuple[str, str]:
        """
        Generate an image using Gemini's imagen model with style and shape
        
        Args:
            prompt: Text description of the image to generate
            style: The style for the image (Photo, Illustration, Comic, etc.)
            shape: The shape/aspect ratio of the image (square, portrait, landscape)
            
        Returns:
            tuple: (filename, image_url)
        """
        try:
            logger.info(f"Generating image with Gemini for prompt: {prompt[:50]}...")
            
            # Create styled prompt by incorporating the style
            styled_prompt = f"{prompt}, in {style.lower()} style"
            
            # Map shape to Gemini aspect ratio format
            aspect_ratio_mapping = {
                "square": "1:1",
                "portrait": "9:16",
                "landscape": "16:9"
            }
            aspect_ratio = aspect_ratio_mapping.get(shape, "1:1")
            
            result = self.client.models.generate_images(
                model="models/imagen-4.0-generate-001",
                prompt=styled_prompt,
                config=dict(
                    number_of_images=1,
                    output_mime_type="image/jpeg",
                    aspect_ratio=aspect_ratio,
                    image_size="1K",
                ),
            )

            if not result.generated_images:
                raise Exception("No images generated by Gemini API")

            if len(result.generated_images) != 1:
                logger.warning("Number of images generated does not match the requested number")

            # Generate unique filename with style and shape info
            filename = f"gemini_{style}_{shape}_{uuid.uuid4().hex}.jpg"
            filepath = os.path.join(self.output_dir, filename)
            
            # Save the generated image
            generated_image = result.generated_images[0]
            generated_image.image.save(filepath)
            
            # Try uploading to GCS
            try:
                destination_blob_name = f"image/{filename}"
                storage_client = storage.Client()
                bucket = storage_client.bucket(config.GCS_BUCKET_NAME)
                blob = bucket.blob(destination_blob_name)
                blob.upload_from_filename(filepath)
                image_url = f"https://storage.googleapis.com/{config.GCS_BUCKET_NAME}/{destination_blob_name}"
            except Exception as e:
                logger.error(f"Error uploading to GCS: {e}")
                image_url = f"{config.BASE_URL}/images/{filename}"
            
            logger.info(f"Image generated successfully with {style} style in {shape} format: {filename}")
            return filename, image_url
            
        except Exception as e:
            logger.error(f"Error generating image with Gemini: {str(e)}")
            raise Exception(f"Failed to generate image: {str(e)}")


# Create a singleton instance
gemini_service = GeminiImageService()