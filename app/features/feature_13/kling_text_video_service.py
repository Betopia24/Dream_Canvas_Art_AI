import logging
import os
import requests
from datetime import datetime
import fal_client
from app.core.config import config
import mimetypes
from google.cloud import storage

logger = logging.getLogger(__name__)

class KlingTextVideoService:
    """Service for generating videos using Kling Video from FAL.ai"""
    
    def __init__(self):
        self.api_key = config.FAL_API_KEY
        if not self.api_key:
            raise ValueError("FAL_API_KEY is required in .env file")
        
        # Configure FAL client
        os.environ["FAL_KEY"] = self.api_key
        fal_client.api_key = self.api_key
        
        self.videos_folder = "generated_videos"
        # Create the folder if it doesn't exist
        os.makedirs(self.videos_folder, exist_ok=True)
        
    async def generate_video(self, prompt: str, shape: str) -> str:
        """
        Generate a video using Kling Video and save it locally
        
        Args:
            prompt (str): The video description prompt
            shape (str): The video aspect ratio shape (square, portrait, landscape)
            
        Returns:
            str: Local video URL (similar to feature_10)
        """
        try:
            logger.info(f"Generating video with Kling for prompt: {prompt[:50]}...")
            
            # Map shape to aspect ratio
            aspect_ratio_mapping = {
                "square": "1:1",
                "portrait": "9:16", 
                "landscape": "16:9"
            }
            aspect_ratio = aspect_ratio_mapping.get(shape, "16:9")
            
            # Submit the request to FAL.ai
            handler = fal_client.submit(
                "fal-ai/kling-video/v2.1/master/text-to-video",
                arguments={
                    "prompt": prompt,
                    "duration": "5",  # 5 seconds for simplicity
                    "aspect_ratio": aspect_ratio,
                    "cfg_scale": 0.5,
                    "negative_prompt": "blur, distort, and low quality",
                    "num_videos": 1
                }
            )
            
            # Get the result
            result = handler.get()
            
            if not result or "video" not in result or not result["video"]:
                raise Exception("No video generated by FAL.ai")
            
            # Get the video URL
            video_url = result["video"]["url"]

            # Download video bytes
            response = requests.get(video_url)
            response.raise_for_status()
            data = response.content

            # Build filename
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            safe_prompt = "".join(c for c in prompt[:30] if c.isalnum() or c in (' ', '-', '_')).rstrip()
            safe_prompt = safe_prompt.replace(' ', '_')
            filename = f"kling_{timestamp}_{safe_prompt}.mp4"

            # Try uploading to GCS in-memory
            try:
                destination_blob_name = f"video/{filename}"
                storage_client = storage.Client()
                bucket = storage_client.bucket(config.GCS_BUCKET_NAME)
                content_type = mimetypes.guess_type(filename)[0] or 'video/mp4'
                blob = bucket.blob(destination_blob_name)
                blob.upload_from_string(data, content_type=content_type)
                video_url = f"https://storage.googleapis.com/{config.GCS_BUCKET_NAME}/{destination_blob_name}"
                logger.info(f"Video uploaded to GCS: {video_url}")
                return video_url
            except Exception as e:
                logger.error(f"Error uploading video to GCS: {e}")

            # Fallback: save locally
            file_path = os.path.join(self.videos_folder, filename)
            with open(file_path, 'wb') as f:
                f.write(data)
            local_video_url = f"{config.BASE_URL}/videos/{filename}"
            logger.info(f"Video saved to: {file_path}")
            logger.info(f"Video URL: {local_video_url}")
            return local_video_url
            
            
        except Exception as e:
            logger.error(f"Error generating video: {str(e)}")
            raise
    
    async def _download_and_save_video(self, video_url: str, prompt: str) -> str:
        """
        Download video from URL and save it locally (like feature_10)
        
        Args:
            video_url (str): URL of the generated video
            prompt (str): Original prompt (for filename)
            
        Returns:
            str: Local video URL (BASE_URL + filename)
        """
        try:
            # Create a safe filename
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            safe_prompt = "".join(c for c in prompt[:30] if c.isalnum() or c in (' ', '-', '_')).rstrip()
            safe_prompt = safe_prompt.replace(' ', '_')
            filename = f"kling_{timestamp}_{safe_prompt}.mp4"
            
            # Full path for the video
            file_path = os.path.join(self.videos_folder, filename)
            
            # Download the video
            response = requests.get(video_url)
            response.raise_for_status()
            
            # Save the video
            with open(file_path, 'wb') as f:
                f.write(response.content)
            
            # Return URL like feature_10
            local_video_url = f"{config.BASE_URL}/videos/{filename}"
            
            logger.info(f"Video saved to: {file_path}")
            logger.info(f"Video URL: {local_video_url}")
            return local_video_url
            
        except Exception as e:
            logger.error(f"Error downloading and saving video: {str(e)}")
            raise

# Create a singleton instance
kling_text_video_service = KlingTextVideoService()
