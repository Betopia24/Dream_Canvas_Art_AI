import logging
import os
import requests
from datetime import datetime
import fal_client
from app.core.config import config

logger = logging.getLogger(__name__)

class FluxKontextDevService:
    """Service for generating images using Flux Kontext Dev from FAL.ai"""
    
    def __init__(self):
        self.api_key = config.FAL_API_KEY
        if not self.api_key:
            raise ValueError("FAL_API_KEY is required in .env file")
        
        # Configure FAL client - set the API key in the environment variable that fal_client expects
        os.environ["FAL_KEY"] = self.api_key
        
        # Also set it directly on the client as backup
        fal_client.api_key = self.api_key
        
        self.images_folder = "generated_images"
        # Create the folder if it doesn't exist
        os.makedirs(self.images_folder, exist_ok=True)
        
    async def generate_image(self, prompt: str, style: str = "Photo", shape: str = "square") -> str:
        """
        Generate an image using Flux Kontext Dev and save it locally
        
        Args:
            prompt (str): The image description prompt
            style (str): Style of the image (Photo, Illustration, etc.)
            shape (str): Shape/aspect ratio (square, portrait, landscape)
            
        Returns:
            str: Local file path of the saved image
        """
        try:
            logger.info(f"Generating {style} style image in {shape} format with Flux Kontext Dev for prompt: {prompt[:50]}...")
            
            # Create styled prompt
            styled_prompt = f"{style} style: {prompt}"
            
            # Map shape to image_size
            shape_mapping = {
                "square": "square_hd",
                "portrait": "portrait_4_3", 
                "landscape": "landscape_4_3"
            }
            image_size = shape_mapping.get(shape, "square_hd")
            
            # Submit the request to FAL.ai
            handler = fal_client.submit(
                "fal-ai/flux-pro/kontext/max/text-to-image",
                arguments={
                    "prompt": styled_prompt,
                    "image_size": image_size,
                    "num_inference_steps": 28,
                    "guidance_scale": 3.5,
                    "num_images": 1,
                    "enable_safety_checker": True
                }
            )
            
            # Get the result
            result = handler.get()
            
            if not result or "images" not in result or not result["images"]:
                raise Exception("No images generated by FAL.ai")
            
            # Get the image URL
            image_url = result["images"][0]["url"]
            
            # Download and save the image locally
            local_image_path = await self._download_and_save_image(image_url, prompt, style, shape)
            
            logger.info(f"Successfully generated and saved {style} style image in {shape} format for prompt: {prompt}")
            return local_image_path
            
        except Exception as e:
            logger.error(f"Error generating image: {str(e)}")
            raise
    
    async def _download_and_save_image(self, image_url: str, prompt: str, style: str, shape: str) -> str:
        """
        Download image from URL and save it locally
        
        Args:
            image_url (str): URL of the generated image
            prompt (str): Original prompt (for filename)
            style (str): Style used for generation
            shape (str): Shape used for generation
            
        Returns:
            str: Local file path of the saved image
        """
        try:
            # Create a safe filename
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            safe_prompt = "".join(c for c in prompt[:30] if c.isalnum() or c in (' ', '-', '_')).rstrip()
            safe_prompt = safe_prompt.replace(' ', '_')
            filename = f"flux_kontext_{timestamp}_{style}_{shape}_{safe_prompt}.png"
            
            # Full path for the image
            file_path = os.path.join(self.images_folder, filename)
            
            # Download the image
            response = requests.get(image_url)
            response.raise_for_status()
            
            # Save the image
            with open(file_path, 'wb') as f:
                f.write(response.content)
            
            # Return URL instead of file path
            image_url = f"{config.BASE_URL}/images/{filename}"
            
            logger.info(f"Image saved to: {file_path}")
            logger.info(f"Image URL: {image_url}")
            return image_url
            
        except Exception as e:
            logger.error(f"Error downloading and saving image: {str(e)}")
            raise

# Create a singleton instance
flux_kontext_dev_service = FluxKontextDevService()
