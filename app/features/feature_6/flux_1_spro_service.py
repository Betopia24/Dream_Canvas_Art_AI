import logging
import os
import requests
import mimetypes
from datetime import datetime
import fal_client
from app.core.config import config

logger = logging.getLogger(__name__)

class Flux1SproService:
    """Service for generating images using Flux 1 SRPO from FAL.ai"""
    
    def __init__(self):
        self.api_key = config.FAL_API_KEY
        if not self.api_key:
            raise ValueError("FAL_API_KEY is required in .env file")
        
        # Configure FAL client
        os.environ["FAL_KEY"] = self.api_key
        fal_client.api_key = self.api_key
        
        self.images_folder = "generated_images"
        try:
            from google.cloud import storage
            self.storage_client = storage.Client()
            self.bucket = self.storage_client.bucket(config.GCS_BUCKET_NAME)
        except Exception:
            self.storage_client = None
            self.bucket = None
        
    async def generate_image(self, prompt: str, user_id: str, style: str = "Photo", shape: str = "square") -> str:
        """
        Generate an image using Flux 1 SRPO and save it locally
        
        Args:
            prompt (str): The image description prompt
            user_id (str): The user ID for folder organization
            style (str): Style of the image (Photo, Illustration, etc.)
            shape (str): Shape/aspect ratio (square, portrait, landscape)
            
        Returns:
            str: URL to the generated image
        """
        try:
            logger.info(f"Generating {style} style image in {shape} format with Flux 1 SRPO for prompt: {prompt[:50]}...")
            
            # Create styled prompt
            styled_prompt = f"{style} style: {prompt}"
            
            # Map shape to image_size
            shape_mapping = {
                "square": "square_hd",
                "portrait": "portrait_4_3", 
                "landscape": "landscape_4_3"
            }
            image_size = shape_mapping.get(shape, "square_hd")
            
            # Submit the request to FAL.ai
            handler = fal_client.submit(
                "fal-ai/flux-1/srpo",
                arguments={
                    "prompt": styled_prompt,
                    "image_size": image_size,
                    "num_inference_steps": 28,
                    "guidance_scale": 3.5,
                    "num_images": 1,
                    "enable_safety_checker": True
                }
            )
            
            # Get the result
            result = handler.get()
            
            if not result or "images" not in result or not result["images"]:
                raise Exception("No images generated by fal.ai - the model may have rejected the prompt due to content policies or the service may be temporarily unavailable")
            
            # Get the image URL
            image_url = result["images"][0]["url"]

            # Build a filename similar to _download_and_save_image
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            safe_prompt = "".join(c for c in prompt[:30] if c.isalnum() or c in (' ', '-', '_')).rstrip()
            safe_prompt = safe_prompt.replace(' ', '_')
            filename = f"flux1_srpo_{timestamp}_{style}_{shape}_{safe_prompt}.png"

            # Download image bytes
            resp = requests.get(image_url)
            resp.raise_for_status()
            image_bytes = resp.content

            # Try upload to GCS from memory
            if self.bucket:
                try:
                    destination_blob_name = f"image/{user_id}/{filename}"
                    blob = self.bucket.blob(destination_blob_name)
                    content_type = mimetypes.guess_type(filename)[0] or 'image/png'
                    blob.upload_from_string(image_bytes, content_type=content_type)
                    image_url = f"https://storage.googleapis.com/{config.GCS_BUCKET_NAME}/{destination_blob_name}"
                    logger.info(f"Image uploaded to GCS: {image_url}")
                    return image_url
                except Exception as e:
                    logger.error(f"Error uploading to GCS: {e}")

            # Fallback: save locally
            file_path = os.path.join(self.images_folder, filename)
            with open(file_path, 'wb') as f:
                f.write(image_bytes)

            image_url = f"{config.BASE_URL}/images/{filename}"
            logger.info(f"Image saved to: {file_path}")
            logger.info(f"Image URL: {image_url}")
            return image_url
            
        except Exception as e:
            logger.error(f"Error generating image: {str(e)}")
            raise
    
    async def _download_and_save_image(self, image_url: str, prompt: str, user_id: str, style: str, shape: str) -> str:
        """
        Download image from URL and save it locally
        
        Args:
            image_url (str): URL of the generated image
            prompt (str): Original prompt (for filename)
            user_id (str): User ID for folder organization
            style (str): Style used for generation
            shape (str): Shape used for generation
            
        Returns:
            str: Local image URL
        """
        try:
            # Create a safe filename
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            safe_prompt = "".join(c for c in prompt[:30] if c.isalnum() or c in (' ', '-', '_')).rstrip()
            safe_prompt = safe_prompt.replace(' ', '_')
            filename = f"flux1_srpo_{timestamp}_{style}_{shape}_{safe_prompt}.png"
            
            # Full path for the image
            file_path = os.path.join(self.images_folder, filename)
            
            # Download the image
            response = requests.get(image_url)
            response.raise_for_status()
            
            # Save the image
            with open(file_path, 'wb') as f:
                f.write(response.content)
            
            # Upload to GCS if available and return plain storage URL
            if self.bucket:
                destination_blob_name = f"image/{user_id}/{filename}"
                try:
                    blob = self.bucket.blob(destination_blob_name)
                    blob.upload_from_filename(file_path)
                    image_url = f"https://storage.googleapis.com/{config.GCS_BUCKET_NAME}/{destination_blob_name}"
                    logger.info(f"Image uploaded to GCS: {image_url}")
                    return image_url
                except Exception as e:
                    logger.error(f"Error uploading to GCS: {str(e)}")

            # Fallback to local URL
            image_url = f"{config.BASE_URL}/images/{filename}"

            logger.info(f"Image saved to: {file_path}")
            logger.info(f"Image URL: {image_url}")
            return image_url
            
        except Exception as e:
            logger.error(f"Error downloading and saving image: {str(e)}")
            raise

# Create a singleton instance
flux1_spro_service = Flux1SproService()
